package dev.sepd.sepd_rekit;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.HashMap;
import java.util.Map;

public class Sepd_Rekit extends JavaPlugin implements Listener {

    private Map<String, String> regionKits = new HashMap<>();
    private Map<String, ConfigurationSection> kits = new HashMap<>();
    private Map<Player, Location> regionSelections = new HashMap<>();

    @Override
    public void onEnable() {
        // Register events
        getServer().getPluginManager().registerEvents(this, this);

        // Load configuration
        loadConfig();
    }

    @EventHandler
    public void onPlayerDeath(PlayerDeathEvent event) {
        Player victim = event.getEntity();
        Player killer = victim.getKiller();

        if (killer != null) {
            // Check if the kill happened in a defined region
            String region = getRegionName(killer.getLocation());
            if (region != null) {
                // Get the kit associated with the region
                String kit = regionKits.get(region);

                if (kit != null) {
                    // Give the killer the specified kit
                    giveKit(killer, kit);
                }
            }
        }
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        Player player = event.getPlayer();
        ItemStack item = event.getItem();

        if (item != null && item.getType() == Material.STICK) {
            // Handle region selection with the stick
            handleRegionSelection(player);
        }
    }

    private void handleRegionSelection(Player player) {
        if (regionSelections.containsKey(player)) {
            // Second point selected
            Location point1 = regionSelections.get(player);
            Location point2 = player.getLocation();

            // Create a region based on the two points
            createRegion(player, point1, point2);

            // Remove the player from the selection map
            regionSelections.remove(player);
            player.sendMessage("Region created and associated with a kit.");
        } else {
            // First point selected
            regionSelections.put(player, player.getLocation());
            player.sendMessage("First region point selected. Right-click again to complete the selection.");
        }
    }

    private void createRegion(Player player, Location point1, Location point2) {
        String regionName = "region" + System.currentTimeMillis();
        String kitName = "kit" + System.currentTimeMillis();

        // Set region kit in the config
        regionKits.put(regionName, kitName);
        kits.put(kitName, saveKit(player, kitName));

        saveKits();
        saveRegionKits();
    }

    private String getRegionName(Location location) {
        // Replace this with your logic to determine the region based on the location
        return "region1";
    }

    private void giveKit(Player player, String kitName) {
        ConfigurationSection kitSection = kits.get(kitName);
        if (kitSection != null) {
            ItemStack[] items = loadKit(kitSection);
            if (items != null) {
                player.getInventory().clear();
                player.getInventory().setContents(items);
                player.sendMessage("You received the kit!");
            }
        }
    }

    private ConfigurationSection saveKit(Player player, String kitName) {
        ConfigurationSection kitSection = getConfig().createSection("kits." + kitName);
        ItemStack[] items = player.getInventory().getContents();
        for (int i = 0; i < items.length; i++) {
            if (items[i] != null) {
                kitSection.set("items." + i, items[i]);
            }
        }
        return kitSection;
    }

    private ItemStack[] loadKit(ConfigurationSection kitSection) {
        if (kitSection.isConfigurationSection("items")) {
            ConfigurationSection itemsSection = kitSection.getConfigurationSection("items");
            ItemStack[] items = new ItemStack[itemsSection.getKeys(false).size()];
            for (String key : itemsSection.getKeys(false)) {
                int index = Integer.parseInt(key);
                ItemStack item = itemsSection.getItemStack(key);
                items[index] = item;
            }
            return items;
        }
        return null;
    }

    private void loadConfig() {
        saveDefaultConfig();
        // Load region kits from the config.yml file
        ConfigurationSection regionsSection = getConfig().getConfigurationSection("regions");
        if (regionsSection != null) {
            for (String regionName : regionsSection.getKeys(false)) {
                regionKits.put(regionName, regionsSection.getString(regionName));
            }
        }

        // Load kits from the config.yml file
        ConfigurationSection kitsSection = getConfig().getConfigurationSection("kits");
        if (kitsSection != null) {
            for (String kitName : kitsSection.getKeys(false)) {
                kits.put(kitName, kitsSection.getConfigurationSection(kitName));
            }
        }
    }

    private void saveKits() {
        ConfigurationSection kitsSection = getConfig().createSection("kits");
        for (Map.Entry<String, ConfigurationSection> entry : kits.entrySet()) {
            kitsSection.set(entry.getKey(), entry.getValue());
        }
        saveConfig();
    }

    private void saveRegionKits() {
        getConfig().createSection("regions", regionKits);
        saveConfig();
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (label.equalsIgnoreCase("rekitreload") && sender instanceof Player) {
            reloadConfig();
            loadConfig();
            sender.sendMessage("Configuration reloaded!");
            return true;
        }

        return false;
    }
}
